# -*- coding: utf-8 -*-
"""Hospital Management System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fXj1FR04ivfrJueRJ3Nbt-LToKI_78Tc

# **Create the Patient, Doctor, and Appointment Classes**
"""

class Patient:
    def __init__(self, patient_id, name, age, gender, medical_history):
        self.patient_id = patient_id
        self.name = name
        self.age = age
        self.gender = gender
        self.medical_history = medical_history

class Doctor:
    def __init__(self, doctor_id, name, specialization, contact_info):
        self.doctor_id = doctor_id
        self.name = name
        self.specialization = specialization
        self.contact_info = contact_info

class Appointment:
    def __init__(self, appointment_id, patient_id, doctor_id, date, time, reason):
        self.appointment_id = appointment_id
        self.patient_id = patient_id
        self.doctor_id = doctor_id
        self.date = date
        self.time = time
        self.reason = reason

class HospitalManagementSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments = {}

    def _generate_unique_id(self, prefix, collection):
        number = 1
        while True:
            new_id = f"{prefix}{str(number).zfill(3)}"
            if new_id not in collection:
                return new_id
            number += 1

    def add_patient(self, name, age, gender, medical_history):
        patient_id = self._generate_unique_id('P', self.patients)
        new_patient = Patient(patient_id, name, age, gender, medical_history)
        self.patients[patient_id] = new_patient
        print(f"Patient {patient_id} added successfully!")

    def view_patient_details(self, patient_id):
        patient = self.patients.get(patient_id)
        if patient:
            print(f"ID: {patient.patient_id}, Name: {patient.name}, Age: {patient.age}, "
                  f"Gender: {patient.gender}, Medical History: {patient.medical_history}")
        else:
            print("Patient not found.")

    def update_patient_info(self, patient_id, new_name=None, new_age=None,
                            new_gender=None, new_medical_history=None):
        patient = self.patients.get(patient_id)
        if patient:
            if new_name:
                patient.name = new_name
            if new_age:
                patient.age = new_age
            if new_gender:
                patient.gender = new_gender
            if new_medical_history is not None:
                patient.medical_history = new_medical_history
            print("Patient information updated successfully.")
        else:
            print("Patient not found.")

    def delete_patient(self, patient_id):
        if patient_id in self.patients:
            del self.patients[patient_id]
            print("Patient deleted successfully.")
        else:
            print("Patient not found.")

    def list_all_patients(self):
        if self.patients:
            for patient in self.patients.values():
                print(f"{patient.patient_id}: {patient.name}")
        else:
            print("No patients found.")

    def add_doPctor(self, name, specialization, contact_info):
        doctor_id = self._generate_unique_id('D', self.doctors)
        new_doctor = Doctor(doctor_id, name, specialization, contact_info)
        self.doctors[doctor_id] = new_doctor
        print(f"Doctor {doctor_id} added successfully!")

    def view_doctor_details(self, doctor_id):
        doctor = self.doctors.get(doctor_id)
        if doctor:
            print(f"ID: {doctor.doctor_id}, Name: {doctor.name}, "
                  f"Specialization: {doctor.specialization}, Contact: {doctor.contact_info}")
        else:
            print("Doctor not found.")

    def update_doctor_info(self, doctor_id, new_name=None, new_specialization=None, new_contact_info=None):
        doctor = self.doctors.get(doctor_id)
        if doctor:
            if new_name:
                doctor.name = new_name
            if new_specialization:
                doctor.specialization = new_specialization
            if new_contact_info:
                doctor.contact_info = new_contact_info
            print("Doctor information updated successfully.")
        else:
            print("Doctor not found.")

    def delete_doctor(self, doctor_id):
        if doctor_id in self.doctors:
            del self.doctors[doctor_id]
            print("Doctor deleted successfully.")
        else:
            print("Doctor not found.")

    def list_all_doctors(self):
        if self.doctors:
            for doctor in self.doctors.values():
                print(f"{doctor.doctor_id}: {doctor.name}")
        else:
            print("No doctors found.")

    def book_appointment(self, patient_id, doctor_id, date, time, reason):
        if patient_id not in self.patients:
            print("Patient ID not found.")
            return
        if doctor_id not in self.doctors:
            print("Doctor ID not found.")
            return
        appointment_id = self._generate_unique_id('A', self.appointments)
        new_appointment = Appointment(appointment_id, patient_id, doctor_id, date, time, reason)
        self.appointments[appointment_id] = new_appointment
        print(f"Appointment {appointment_id} booked successfully!")

    def view_appointment_details(self, appointment_id):
        appointment = self.appointments.get(appointment_id)
        if appointment:
            patient_name = self.patients[appointment.patient_id].name
            doctor_name = self.doctors[appointment.doctor_id].name
            print(f"Appointment ID: {appointment.appointment_id}, Patient: {patient_name}, "
                  f"Doctor: {doctor_name}, Date: {appointment.date}, Time: {appointment.time}, Reason: {appointment.reason}")
        else:
            print("Appointment not found.")

    def cancel_appointment(self, appointment_id):
        if appointment_id in self.appointments:
            del self.appointments[appointment_id]
            print("Appointment canceled successfully.")
        else:
            print("Appointment not found.")

    def list_patient_appointments(self, patient_id):
        found = False
        for appointment in self.appointments.values():
            if appointment.patient_id == patient_id:
                print(f"{appointment.appointment_id}: Doctor {self.doctors[appointment.doctor_id].name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
                found = True
        if not found:
            print("No appointments found for this patient.")

    def list_doctor_appointments(self, doctor_id):
        found = False
        for appointment in self.appointments.values():
            if appointment.doctor_id == doctor_id:
                print(f"{appointment.appointment_id}: Patient {self.patients[appointment.patient_id].name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
                found = True
        if not found:
            print("No appointments found for this doctor.")

    def list_all_appointments(self):
        if self.appointments:
            for appointment in self.appointments.values():
                patient_name = self.patients[appointment.patient_id].name
                doctor_name = self.doctors[appointment.doctor_id].name
                print(f"{appointment.appointment_id}: Patient {patient_name}, Doctor {doctor_name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
        else:
            print("No appointments found.")

"""# **Patient Management**"""

def add_patient(self, name, age, gender, medical_history):
        patient_id = self._generate_unique_id('P', self.patients)
        new_patient = Patient(patient_id, name, age, gender, medical_history)
        self.patients[patient_id] = new_patient
        print(f"Patient {patient_id} added successfully!")

def view_patient_details(self, patient_id):
        patient = self.patients.get(patient_id)
        if patient:
            print(f"ID: {patient.patient_id}, Name: {patient.name}, Age: {patient.age}, "
                  f"Gender: {patient.gender}, Medical History: {patient.medical_history}")
        else:
            print("Patient not found.")

def update_patient_info(self, patient_id, new_name=None, new_age=None,
                            new_gender=None, new_medical_history=None):
        patient = self.patients.get(patient_id)
        if patient:
            if new_name:
                patient.name = new_name
            if new_age:
                patient.age = new_age
            if new_gender:
                patient.gender = new_gender
            if new_medical_history is not None:
                patient.medical_history = new_medical_history
            print("Patient information updated successfully.")
        else:
            print("Patient not found.")

def delete_patient(self, patient_id):
        if patient_id in self.patients:
            del self.patients[patient_id]
            print("Patient deleted successfully.")
        else:
            print("Patient not found.")

def list_all_patients(self):
        if self.patients:
            for patient in self.patients.values():
                print(f"{patient.patient_id}: {patient.name}")
        else:
            print("No patients found.")

"""# **Doctor Management**"""

def add_doctor(self, name, specialization, contact_info):
        doctor_id = self._generate_unique_id('D', self.doctors)
        new_doctor = Doctor(doctor_id, name, specialization, contact_info)
        self.doctors[doctor_id] = new_doctor
        print(f"Doctor {doctor_id} added successfully!")

def view_doctor_details(self, doctor_id):
        doctor = self.doctors.get(doctor_id)
        if doctor:
            print(f"ID: {doctor.doctor_id}, Name: {doctor.name}, "
                  f"Specialization: {doctor.specialization}, Contact: {doctor.contact_info}")
        else:
            print("Doctor not found.")

def update_doctor_info(self, doctor_id, new_name=None, new_specialization=None, new_contact_info=None):
        doctor = self.doctors.get(doctor_id)
        if doctor:
            if new_name:
                doctor.name = new_name
            if new_specialization:
                doctor.specialization = new_specialization
            if new_contact_info:
                doctor.contact_info = new_contact_info
            print("Doctor information updated successfully.")
        else:
            print("Doctor not found.")

def delete_doctor(self, doctor_id):
        if doctor_id in self.doctors:
            del self.doctors[doctor_id]
            print("Doctor deleted successfully.")
        else:
            print("Doctor not found.")

def list_all_doctors(self):
        if self.doctors:
            for doctor in self.doctors.values():
                print(f"{doctor.doctor_id}: {doctor.name}")
        else:
            print("No doctors found.")

"""# **Appointment Management**"""

def book_appointment(self, patient_id, doctor_id, date, time, reason):
        if patient_id not in self.patients:
            print("Patient ID not found.")
            return
        if doctor_id not in self.doctors:
            print("Doctor ID not found.")
            return
        appointment_id = self._generate_unique_id('A', self.appointments)
        new_appointment = Appointment(appointment_id, patient_id, doctor_id, date, time, reason)
        self.appointments[appointment_id] = new_appointment
        print(f"Appointment {appointment_id} booked successfully!")

def view_appointment_details(self, appointment_id):
        appointment = self.appointments.get(appointment_id)
        if appointment:
            patient_name = self.patients[appointment.patient_id].name
            doctor_name = self.doctors[appointment.doctor_id].name
            print(f"Appointment ID: {appointment.appointment_id}, Patient: {patient_name}, "
                  f"Doctor: {doctor_name}, Date: {appointment.date}, Time: {appointment.time}, Reason: {appointment.reason}")
        else:
            print("Appointment not found.")

def cancel_appointment(self, appointment_id):
        if appointment_id in self.appointments:
            del self.appointments[appointment_id]
            print("Appointment canceled successfully.")
        else:
            print("Appointment not found.")

def list_patient_appointments(self, patient_id):
        found = False
        for appointment in self.appointments.values():
            if appointment.patient_id == patient_id:
                print(f"{appointment.appointment_id}: Doctor {self.doctors[appointment.doctor_id].name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
                found = True
        if not found:
            print("No appointments found for this patient.")

def list_doctor_appointments(self, doctor_id):
        found = False
        for appointment in self.appointments.values():
            if appointment.doctor_id == doctor_id:
                print(f"{appointment.appointment_id}: Patient {self.patients[appointment.patient_id].name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
                found = True
        if not found:
            print("No appointments found for this doctor.")

def list_all_appointments(self):
        if self.appointments:
            for appointment in self.appointments.values():
                patient_name = self.patients[appointment.patient_id].name
                doctor_name = self.doctors[appointment.doctor_id].name
                print(f"{appointment.appointment_id}: Patient {patient_name}, Doctor {doctor_name}, "
                      f"Date: {appointment.date}, Time: {appointment.time}")
        else:
            print("No appointments found.")

"""# **Main Program**"""

def main():
    system = HospitalManagementSystem()

    while True:
        print("\nWelcome to Hospital Management System!\n")
        print("Main Menu:")
        print("1. Patient Management")
        print("2. Doctor Management")
        print("3. Appointment Management")
        print("4. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            print("\nPatient Management:")
            print("1. Add Patient")
            print("2. View Patient Details")
            print("3. Update Patient Info")
            print("4. Delete Patient")
            print("5. List All Patients")
            print("6. Back to Main Menu")

            sub_choice = input("Enter your choice: ")

            if sub_choice == '1':
                name = input("Enter patient name: ")
                age = int(input("Enter patient age: "))
                gender = input("Enter patient gender: ")
                history = input("Enter medical history (comma-separated): ").split(',')
                system.add_patient(name, age, gender, [h.strip() for h in history])

            elif sub_choice == '2':
                pid = input("Enter patient ID: ")
                system.view_patient_details(pid)

            elif sub_choice == '3':
                pid = input("Enter patient ID: ")
                new_name = input("New name (leave empty to skip): ") or None
                new_age_input = input("New age (leave empty to skip): ")
                new_age = int(new_age_input) if new_age_input else None
                new_gender = input("New gender (leave empty to skip): ") or None
                new_history_input = input("New medical history (comma-separated, leave empty to skip): ")
                new_history = [h.strip() for h in new_history_input.split(',')] if new_history_input else None
                system.update_patient_info(pid, new_name, new_age, new_gender, new_history)

            elif sub_choice == '4':
                pid = input("Enter patient ID: ")
                system.delete_patient(pid)

            elif sub_choice == '5':
                system.list_all_patients()

        elif choice == '2':
            print("\nDoctor Management:")
            print("1. Add Doctor")
            print("2. View Doctor Details")
            print("3. Update Doctor Info")
            print("4. Delete Doctor")
            print("5. List All Doctors")
            print("6. Back to Main Menu")

            sub_choice = input("Enter your choice: ")

            if sub_choice == '1':
                name = input("Enter doctor name: ")
                specialization = input("Enter specialization: ")
                contact = input("Enter contact info: ")
                system.add_doctor(name, specialization, contact)

            elif sub_choice == '2':
                did = input("Enter doctor ID: ")
                system.view_doctor_details(did)

            elif sub_choice == '3':
                did = input("Enter doctor ID: ")
                new_name = input("New name (leave empty to skip): ") or None
                new_spec = input("New specialization (leave empty to skip): ") or None
                new_contact = input("New contact info (leave empty to skip): ") or None
                system.update_doctor_info(did, new_name, new_spec, new_contact)

            elif sub_choice == '4':
                did = input("Enter doctor ID: ")
                system.delete_doctor(did)

            elif sub_choice == '5':
                system.list_all_doctors()

        elif choice == '3':
            print("\nAppointment Management:")
            print("1. Book Appointment")
            print("2. View Appointment Details")
            print("3. Cancel Appointment")
            print("4. List Patient Appointments")
            print("5. List Doctor Appointments")
            print("6. List All Appointments")
            print("7. Back to Main Menu")

            sub_choice = input("Enter your choice: ")

            if sub_choice == '1':
                pid = input("Enter patient ID: ")
                did = input("Enter doctor ID: ")
                date = input("Enter date (YYYY-MM-DD): ")
                time = input("Enter time (HH:MM): ")
                reason = input("Enter reason: ")
                system.book_appointment(pid, did, date, time, reason)

            elif sub_choice == '2':
                aid = input("Enter appointment ID: ")
                system.view_appointment_details(aid)

            elif sub_choice == '3':
                aid = input("Enter appointment ID: ")
                system.cancel_appointment(aid)

            elif sub_choice == '4':
                pid = input("Enter patient ID: ")
                system.list_patient_appointments(pid)

            elif sub_choice == '5':
                did = input("Enter doctor ID: ")
                system.list_doctor_appointments(did)

            elif sub_choice == '6':
                system.list_all_appointments()

        elif choice == '4':
            print("Exiting system. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()