# -*- coding: utf-8 -*-
"""covid_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gdGyXB4NcpzNf074i0ZcJFTxagGN69TC

project 1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the data from the local CSV file
df = pd.read_csv("owid-covid-data.csv")

# Display the first 5 rows of the dataset to get a quick overview
df.head()

df.columns

df.info()

# Show statistical summary
df.describe(include='all')

print(df.isnull().sum())

def preprocess_covid_data(df):
    # Keep only the relevant columns
    columns_to_keep = [
        'location', 'iso_code', 'date',
        'new_cases', 'total_cases',
        'new_deaths', 'total_deaths',
        'people_vaccinated', 'population',
        'reproduction_rate'
    ]
    df = df[columns_to_keep].copy()

    # Convert the 'date' column to datetime format
    df['date'] = pd.to_datetime(df['date'])

    # Filter the dataset to include only countries (ISO codes are 3 letters)
    df = df[df['iso_code'].str.len() == 3]

    # Fill missing values for daily metrics with 0 (assuming no cases/deaths/vaccinations on that day)
    daily_zero_cols = ['new_cases', 'new_deaths', 'people_vaccinated']
    for col in daily_zero_cols:
        if col in df.columns:
            df[col] = df[col].fillna(0)

    # Fill missing values for cumulative metrics using forward fill (or backfill if needed)
    fill_forward_cols = ['total_cases', 'total_deaths', 'population']
    for col in fill_forward_cols:
        if col in df.columns:
            df[col] = df[col].fillna(method='ffill').fillna(method='bfill')

    # Leave any remaining NaN values (e.g., reproduction_rate) untouched

    return df

# Load the dataset
df = pd.read_csv("owid-covid-data.csv")

# Clean and preprocess the data
df_clean = preprocess_covid_data(df)

# Display the first few rows of the cleaned dataset
df_clean.head()

# Convert the 'date' column to proper datetime format
df_clean['date'] = pd.to_datetime(df_clean['date'])

# Remove rows that represent continents or the world (ISO codes starting with 'OWID')
df_clean = df_clean[df['iso_code'].str.startswith('OWID') == False]

# Fill missing values in 'new_cases' and 'new_deaths' columns with 0
df_clean['new_cases'] = df_clean['new_cases'].fillna(0)
df_clean['new_deaths'] = df_clean['new_deaths'].fillna(0)

# Check for remaining missing values in the dataset
df_clean.isnull().sum()

# A simple class to explore COVID-19 data (does not handle data loading)
class COVIDExplorer:
    def __init__(self, data):
        self.data = data

    def get_country_data(self, country):
        # Return a copy of the data filtered for a specific country
        return self.data[self.data['location'] == country].copy()

    def calculate_metrics(self, df_clean):
        # Calculate the daily change in new cases using NumPy
        df_clean['daily_change_cases'] = np.append([0], np.diff(df_clean['new_cases']))

        # Calculate the percentage of the population that is vaccinated
        if 'people_vaccinated' in df_clean.columns and 'population' in df_clean.columns:
            df_clean['vaccinated_percent'] = (df_clean['people_vaccinated'] / df_clean['population']) * 100

        # Calculate total cases per million people
        df_clean['cases_per_million'] = (df_clean['total_cases'] / df_clean['population']) * 1e6

        return df_clean

# Example usage
explorer = COVIDExplorer(df_clean)
egypt_df = explorer.get_country_data("Egypt")

# Create an instance of the COVIDExplorer class with the cleaned dataset
explorer = COVIDExplorer(df_clean)

# Get data specifically for Egypt
egypt_df = explorer.get_country_data("Egypt")

# Calculate additional metrics for Egypt's data
egypt_df = explorer.calculate_metrics(egypt_df)

# Display the first 50 rows with selected columns for analysis
egypt_df[['date', 'new_cases', 'cases_per_million', 'vaccinated_percent']].tail(10)

# Function to plot new daily COVID-19 cases for a specific country
def plot_new_cases(df, country):
    plt.figure(figsize=(10, 5))  # Set the figure size
    plt.plot(df['date'], df['new_cases'], color='orange')  # Plot new cases over time
    plt.title(f"New COVID-19 Cases in {country}")  # Add a title to the chart
    plt.xlabel("Date")  # Label the x-axis
    plt.ylabel("New Cases")  # Label the y-axis
    plt.grid(True)  # Show grid lines
    plt.tight_layout()  # Adjust layout to prevent clipping
    plt.show()  # Display the plot

# Call the function for Egypt's data
plot_new_cases(df_egypt, "Egypt")

# Function to create a bar chart comparing total COVID-19 deaths among selected countries
def plot_total_deaths_comparison(df, countries):
    # Filter the dataset to include only the selected countries
    latest_df = df[df['location'].isin(countries)]

    # Sort by date and keep only the most recent entry for each country
    latest_df = latest_df.sort_values('date').groupby('location').last()

    # Extract total deaths and drop missing values
    deaths = latest_df['total_deaths'].dropna()

    # Create the bar chart
    plt.figure(figsize=(8, 5))
    deaths.plot(kind='bar', color='red')
    plt.title("Total COVID-19 Deaths Comparison")  # Chart title
    plt.ylabel("Total Deaths")  # Y-axis label
    plt.xlabel("Country")  # X-axis label
    plt.xticks(rotation=0)  # Keep country names horizontal
    plt.grid(axis='y')  # Show horizontal grid lines only
    plt.tight_layout()  # Adjust layout
    plt.show()  # Display the plot

# Call the function to compare total deaths in the selected countries
plot_total_deaths_comparison(df_clean, ["Egypt", "Italy", "India", "Germany"])

# Function to plot the vaccination progress over time for a specific country
def plot_vaccination_progress(df, country):
    plt.figure(figsize=(10, 5))  # Set the figure size
    plt.plot(df['date'], df['people_vaccinated'], color='green')  # Plot vaccinated people over time
    plt.title(f"Vaccination Progress in {country}")  # Add a title to the plot
    plt.xlabel("Date")  # Label the x-axis
    plt.ylabel("People Vaccinated")  # Label the y-axis
    plt.grid(True)  # Add grid lines for better readability
    plt.tight_layout()  # Adjust layout to prevent label clipping
    plt.show()  # Display the plot

# Call the function to plot vaccination data for Egypt
plot_vaccination_progress(df_egypt, "Egypt")

# Function to plot the COVID-19 reproduction rate over time for a specific country
def plot_reproduction_rate(df, country):
    plt.figure(figsize=(10, 5))  # Set the size of the plot
    plt.plot(df['date'], df['reproduction_rate'], color='blue')  # Plot reproduction rate over time
    plt.title(f"Reproduction Rate in {country}")  # Add a title to the chart
    plt.xlabel("Date")  # Label for the x-axis
    plt.ylabel("Reproduction Rate")  # Label for the y-axis
    plt.grid(True)  # Display grid lines
    plt.tight_layout()  # Adjust spacing to avoid label cutoffs
    plt.show()  # Show the final plot

# Call the function to plot the reproduction rate for Egypt
plot_reproduction_rate(df_egypt, "Egypt")





"""project 2"""

import pandas as pd

class COVIDDataPreparer:
    def __init__(self, url):
        self.url = url
        self.df = None

    def load_data(self):
        try:
            self.df = pd.read_csv(self.url)
            print("‚úÖ Data loaded successfully.")
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")

    def peek_data(self):
        if self.df is not None:
            print("üìå First 5 rows of the dataset:")
            print(self.df.head())
            print("\nüìå Data types:")
            print(self.df.dtypes)
        else:
            print("‚ö†Ô∏è No data to show.")

    def clean_data(self):
        if self.df is not None:
            # 1. Convert 'date' to datetime format
            self.df['date'] = pd.to_datetime(self.df['date'], errors='coerce')
            print("üìÖ Converted 'date' column to datetime.")

            # 2. Fill missing values
            daily_columns = ['new_cases', 'new_deaths']
            self.df[daily_columns] = self.df[daily_columns].fillna(0)
            print("üß™ Filled missing values in 'new_cases' and 'new_deaths' with 0.")

            # 3. Filter out non-country entries
            excluded_locations = [
                "World", "Africa", "Asia", "Europe", "European Union",
                "International", "North America", "Oceania", "South America"
            ]
            original_shape = self.df.shape
            self.df = self.df[~self.df['location'].isin(excluded_locations)]
            print(f"üåç Filtered out non-country rows: {original_shape[0] - self.df.shape[0]} rows removed.")

            # 4. Optional: Fill forward/backward for reasonable non-daily values
            columns_to_fill = ['reproduction_rate', 'people_vaccinated', 'total_deaths']
            self.df[columns_to_fill] = self.df[columns_to_fill].fillna(method='ffill').fillna(method='bfill')
            print("üîÅ Filled missing values in reproduction_rate and vaccination columns (ffill & bfill).")

        else:
            print("‚ö†Ô∏è No data to clean.")

    def get_data(self):
        return self.df

if __name__ == "__main__":
    URL = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv"
    preparer = COVIDDataPreparer(URL)
    preparer.load_data()
    preparer.peek_data()
    preparer.clean_data()

    # Get cleaned DataFrame for further analysis
    clean_df = preparer.get_data()

import pandas as pd

class COVIDExplorer:
    def __init__(self, data_url):
        self.data_url = data_url
        self.df = None

    def load_data(self):
        """Load COVID-19 dataset and clean it."""
        try:
            self.df = pd.read_csv(self.data_url)
            self.df['date'] = pd.to_datetime(self.df['date'], errors='coerce')

            # Fill missing daily values with 0
            for col in ['new_cases', 'new_deaths']:
                self.df[col] = self.df[col].fillna(0)

            # Filter: keep only countries (exclude continents/world)
            excluded = [
                "World", "Africa", "Asia", "Europe", "European Union",
                "International", "North America", "Oceania", "South America"
            ]
            self.df = self.df[~self.df['location'].isin(excluded)]

            print("‚úÖ Data loaded and cleaned.")
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")

    def get_country_data(self, country_name):
        """Return a DataFrame with data only for the selected country."""
        if self.df is None:
            print("‚ö†Ô∏è Please load the data first using load_data().")
            return None

        country_df = self.df[self.df['location'] == country_name].copy()
        if country_df.empty:
            print(f"‚ö†Ô∏è No data found for '{country_name}'.")
            return None
        return country_df

if __name__ == "__main__":
    url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv"

    explorer = COVIDExplorer(url)
    explorer.load_data()

    egypt_data = explorer.get_country_data("Egypt")
    if egypt_data is not None:
        print(egypt_data.head())

import numpy as np

class COVIDExplorer:
    def __init__(self, data_url):
        self.data_url = data_url
        self.df = None

    def load_data(self):
        """Load and clean the dataset."""
        try:
            self.df = pd.read_csv(self.data_url)
            self.df['date'] = pd.to_datetime(self.df['date'], errors='coerce')

            # Fill missing daily values with 0
            for col in ['new_cases', 'new_deaths']:
                self.df[col] = self.df[col].fillna(0)

            # Filter: keep only countries
            excluded = [
                "World", "Africa", "Asia", "Europe", "European Union",
                "International", "North America", "Oceania", "South America"
            ]
            self.df = self.df[~self.df['location'].isin(excluded)]

            print("‚úÖ Data loaded and cleaned.")
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")

    def get_country_data(self, country_name):
        """Return data for a specific country."""
        if self.df is None:
            print("‚ö†Ô∏è Please load the data first.")
            return None
        country_df = self.df[self.df['location'] == country_name].copy()
        if country_df.empty:
            print(f"‚ö†Ô∏è No data found for '{country_name}'.")
            return None
        return country_df

    def calculate_metrics(self, country_df):
        """Add interesting calculations using Pandas & NumPy."""
        if country_df is None or country_df.empty:
            print("‚ö†Ô∏è No country data to calculate metrics.")
            return country_df

        # 1. Calculate % of population vaccinated
        country_df["percent_vaccinated"] = (
            country_df["people_vaccinated"] / country_df["population"] * 100
        )

        # 2. Calculate 7-day rolling average for new cases (NumPy-style)
        country_df["new_cases_avg"] = country_df["new_cases"].rolling(window=7).mean()

        print("üßÆ Metrics calculated: % vaccinated, 7-day avg of new cases.")
        return country_df

if __name__ == "__main__":
    url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv"

    explorer = COVIDExplorer(url)
    explorer.load_data()

    egypt_data = explorer.get_country_data("Egypt")
    egypt_data = explorer.calculate_metrics(egypt_data)

    print(egypt_data[["date", "new_cases", "new_cases_avg", "people_vaccinated", "percent_vaccinated"]].tail(10))

import matplotlib.pyplot as plt

class COVIDExplorer:
    def __init__(self, data_url):
        self.data_url = data_url
        self.df = None

    def plot_new_cases(self, country_df, country):
        """Line chart: New daily cases over time."""
        plt.figure(figsize=(10, 5))
        plt.plot(country_df['date'], country_df['new_cases'], label='New Cases', color='blue')
        plt.plot(country_df['date'], country_df['new_cases_avg'], label='7-day Avg', color='orange')
        plt.title(f"Daily COVID-19 Cases in {country}")
        plt.xlabel("Date")
        plt.ylabel("New Cases")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def plot_vaccinations(self, country_df, country):
        """Line chart: Vaccination progress over time."""
        plt.figure(figsize=(10, 5))
        plt.plot(country_df['date'], country_df['people_vaccinated'], color='green')
        plt.title(f"Vaccination Progress in {country}")
        plt.xlabel("Date")
        plt.ylabel("People Vaccinated")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def plot_reproduction_rate(self, country_df, country):
        """Line chart: Reproduction rate over time."""
        plt.figure(figsize=(10, 5))
        plt.plot(country_df['date'], country_df['reproduction_rate'], color='red')
        plt.title(f"COVID-19 Reproduction Rate in {country}")
        plt.xlabel("Date")
        plt.ylabel("Reproduction Rate (R)")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def plot_total_deaths_comparison(self, countries):
        """Bar chart: Compare total deaths for selected countries."""
        data = []
        for country in countries:
            df_country = self.get_country_data(country)
            if df_country is not None and not df_country.empty:
                total_deaths = df_country['total_deaths'].max()
                data.append((country, total_deaths))
        countries, deaths = zip(*data)

        plt.figure(figsize=(10, 6))
        plt.bar(countries, deaths, color='purple')
        plt.title("Total COVID-19 Deaths by Country")
        plt.xlabel("Country")
        plt.ylabel("Total Deaths")
        plt.grid(axis='y')
        plt.tight_layout()
        plt.show()

class COVIDExplorer:
    def __init__(self, data_url):
        self.data_url = data_url
        self.df = None

    def load_data(self):
        """Load and clean the dataset."""
        try:
            self.df = pd.read_csv(self.data_url)
            self.df['date'] = pd.to_datetime(self.df['date'], errors='coerce')
            self.df['new_cases'] = self.df['new_cases'].fillna(0)
            self.df['new_deaths'] = self.df['new_deaths'].fillna(0)

            excluded = [
                "World", "Africa", "Asia", "Europe", "European Union",
                "International", "North America", "Oceania", "South America"
            ]
            self.df = self.df[~self.df['location'].isin(excluded)]

            print("‚úÖ Data loaded and cleaned.")
        except Exception as e:
            print(f"‚ùå Error loading data: {e}")

if __name__ == "__main__":
    url = "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv"
    explorer = COVIDExplorer(url)

    explorer.load_data()
    explorer.load_data()

    # Plotting for Egypt
    egypt_data = explorer.get_country_data("Egypt")
    egypt_data = explorer.calculate_metrics(egypt_data)

    explorer.plot_new_cases(egypt_data, "Egypt")
    explorer.plot_vaccinations(egypt_data, "Egypt")
    explorer.plot_reproduction_rate(egypt_data, "Egypt")

    # Comparison Bar Chart
    explorer.plot_total_deaths_comparison(["Egypt", "United States", "India", "Brazil", "Germany"])